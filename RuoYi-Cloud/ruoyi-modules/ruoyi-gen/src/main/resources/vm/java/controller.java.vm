package ${packageName}.controller;

import java.util.List;
import java.io.IOException;
import javax.servlet.http.HttpServletResponse;
import com.ruoyi.common.security.annotation.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.ruoyi.common.log.annotation.Log;
import com.ruoyi.common.log.enums.BusinessType;
import java.util.Arrays;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import com.ruoyi.common.core.web.controller.BaseController;
import com.ruoyi.common.core.web.domain.AjaxResult;
import com.ruoyi.common.core.utils.poi.ExcelUtil;
#if($table.crud)
import com.ruoyi.common.core.web.page.TableDataInfo;
#elseif($table.tree)
#end

/**
 * ${functionName}Controller
 *
 * @author ${author}
 * @date ${datetime}
 */
@Api(tags = "${functionName}")
@RestController
@RequestMapping("/${businessName}")
public class ${ClassName}Controller extends BaseController {

  @Autowired
  private I${ClassName}Service ${className}Service;

/**
 * 查询${functionName}列表
 */
@ApiOperation("查询${functionName}列表")
@PreAuthorize(hasPermi = "${permissionPrefix}:list")
@GetMapping("/list")
    #if($table.crud)
    public TableDataInfo list(
        @ApiParam(value = "${functionName}", required = true)  ${ClassName} ${className}) {
      startPage();
      List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
      return getDataTable(list);
    }
    #elseif($table.tree)
      public AjaxResult list(
          @ApiParam(value = "${functionName}", required = true) @RequestBody ${ClassName} ${className}) {
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        return AjaxResult.success(list);
      }
    #end

  /**
   * 导出${functionName}列表
   */
  @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
  @PostMapping("/export")
  public void export(HttpServletResponse response,
      @ApiParam(value = "${functionName}", required = true) ${ClassName} ${className})
      throws IOException {
    List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
    ExcelUtil<${ClassName}> util = new ExcelUtil<${ClassName}>(${ClassName}. class);
    util.exportExcel(response, list, "${businessName}");
  }

  /**
   * 获取${functionName}详细信息
   */
  @ApiOperation("获取${functionName}详细信息")
  @PreAuthorize(hasPermi = "${permissionPrefix}:query")
  @GetMapping(value = "/{${pkColumn.javaField}}")
  public AjaxResult getInfo(
      @ApiParam(value = "${functionName}Id", required = true) @PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
    return AjaxResult.success(${className}Service.getById(${pkColumn.javaField}));
  }

  /**
   * 新增${functionName}
   */
  @ApiOperation("新增${functionName}")
  @PreAuthorize(hasPermi = "${permissionPrefix}:add")
  @Log(title = "${functionName}", businessType = BusinessType.INSERT)
  @PostMapping
  public AjaxResult add(
      @ApiParam(value = "${functionName}", required = true) @RequestBody ${ClassName} ${className}) {
    return toAjax(${className}Service.save(${className}));
  }

  /**
   * 修改${functionName}
   */
  @ApiOperation("修改${functionName}")
  @PreAuthorize(hasPermi = "${permissionPrefix}:edit")
  @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
  @PutMapping
  public AjaxResult edit(
      @ApiParam(value = "${functionName}", required = true) @RequestBody ${ClassName} ${className}) {
    return toAjax(${className}Service.updateById(${className}));
  }

  /**
   * 删除${functionName}
   */
  @ApiOperation("删除${functionName}")
  @PreAuthorize(hasPermi = "${permissionPrefix}:remove")
  @Log(title = "${functionName}", businessType = BusinessType.DELETE)
  @DeleteMapping("/{${pkColumn.javaField}s}")
  public AjaxResult remove(
      @ApiParam(value = "${functionName}Ids", required = true) @PathVariable ${pkColumn.javaType}
      [] ${pkColumn.javaField}s) {
    return toAjax(${className}Service.removeByIds(Arrays.asList(${pkColumn.javaField}s)));
  }
}
